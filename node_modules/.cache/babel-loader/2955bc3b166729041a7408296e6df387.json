{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/volkovilya/dev/diploma-frontend/src/components/Register.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport PopupWithForm from './PopupWithForm/PopupWithForm';\nimport { handleValidationEmail, handleValidationPassword, handleValidationTextInputRequired } from \"../utils/ValidationForm\";\n\nfunction Register(props) {\n  _s();\n\n  const [email, setEmail] = React.useState(\"\");\n  const [password, setPassword] = React.useState(\"\");\n  const [name, setName] = React.useState(\"\");\n  const [errMessageEmail, setErrMessageEmail] = React.useState(\"\");\n  const [errMessagePassword, setErrMessagePassword] = React.useState(\"\");\n  const [errMessageName, setErrMessageName] = React.useState(\"\");\n  const [isButtonSaveDisabled, setButtonSaveDisabled] = React.useState(true);\n\n  const resetForm = () => {\n    setEmail(\"\");\n    setPassword(\"\");\n    setName(\"\");\n    setErrMessageEmail(\"\");\n    setErrMessagePassword(\"\");\n    setErrMessageName(\"\");\n  };\n\n  const handleSubmit = evt => {\n    //решает какую ошибку и где выводить пользователю при неверной валидации\n    evt.preventDefault();\n\n    if (handleValidationEmail(email) && handleValidationPassword(password) && handleValidationTextInputRequired(name)) {\n      props.onRegister(email, password, name);\n      resetForm();\n    } else {\n      if (!handleValidationEmail(email)) setErrMessageEmail(\"Неправильный формат email\");\n      if (!handleValidationPassword(password)) setErrMessagePassword(\"Пароль введен неверно\");\n      if (!handleValidationTextInputRequired(name)) setErrMessageName(\"Поле Имя обязательно для заполнения\");\n      return;\n    }\n\n    const resetErrors = () => {\n      setErrMessageEmail(\"\");\n      setErrMessagePassword(\"\");\n      setErrMessageName(\"\");\n    }; // if (!handleValidationEmail(email) && handleValidationPassword(password) && handleValidationTextInputRequired(name)) {\n    //   setErrMessageEmail(\"Неправильный формат email\");\n    //   setErrMessagePassword(\"Пароль введен неверно\");\n    //   setErrMessageName(\"Поле Имя обязательно для заполнения\")\n    //   return;\n    // }\n    // if (!handleValidationEmail(email) && !handleValidationPassword(password) && !handleValidationTextInputRequired(name) ) {\n    //   setErrMessageEmail(\"Неправильный формат email\");\n    //   return;\n    // }\n    // if (handleValidationEmail(email) && handleValidationPassword(password) && handleValidationTextInputRequired(name) ) {\n    //   setErrMessageEmail(\"\");\n    //   setErrMessagePassword(\"Пароль введен неверно\");\n    //   setErrMessageName(\"Поле Имя обязательно для заполнения\")\n    //   return;\n    // }\n    // if (handleValidationEmail(email) && !handleValidationPassword(password) && handleValidationTextInputRequired(name) ) {\n    //     setErrMessageEmail(\"\");\n    //     setErrMessagePassword(\"\");\n    //     setErrMessageName(\"Поле Имя обязательно для заполнения\")\n    //     return;\n    //   }\n    //   if (handleValidationEmail(email) && handleValidationPassword(password) && !handleValidationTextInputRequired(name) ) {\n    //     setErrMessageEmail(\"\");\n    //     setErrMessagePassword(\"Пароль введен неверно\");\n    //     setErrMessageName(\"\")\n    //     return;\n    //   }\n    // if (handleValidationEmail(email) && !handleValidationPassword(password) && handleValidationTextInputRequired(name) ) {\n    //     setErrMessageEmail(\"\");\n    //     setErrMessagePassword(\"\");\n    //     setErrMessageName(\"Поле Имя обязательно для заполнения\")\n    //     return;\n    // }\n    // props.onRegister(email, password, name);\n    // resetForm();\n\n  };\n\n  const handleChangeEmail = evt => {\n    setEmail(evt.target.value);\n    resetErrors();\n  };\n\n  const handleChangePassword = evt => {\n    setPassword(evt.target.value);\n    resetErrors();\n  };\n\n  const handleChangeName = evt => {\n    setName(evt.target.value);\n    resetErrors();\n  };\n\n  React.useEffect(() => {\n    //устанавливает кнопку сохранить в нужную кондицию при изменении полей ввода\n    if (email && password && name) {\n      setButtonSaveDisabled(false);\n    } else {\n      setButtonSaveDisabled(true);\n    }\n  }, [handleChangeEmail, handleChangePassword, handleChangeName]);\n  React.useEffect(() => {\n    //сбрасывает форму при выходе из нее даже если пользователь не дошел до отправки формы и передумал заполнять\n    if (props.onResetForm) {\n      resetForm();\n    }\n  }, [props.onClose]);\n  return /*#__PURE__*/_jsxDEV(PopupWithForm, {\n    name: \"popup_auth\",\n    title: \"\\u0412\\u0445\\u043E\\u0434\",\n    isOpen: props.isOpen,\n    onClose: props.onClose,\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"fieldset\", {\n      className: \"popup__form-auth\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"popup__label\",\n        children: \"Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        value: email || '',\n        onChange: handleChangeEmail,\n        name: \"email\",\n        required: true,\n        placeholder: \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u043F\\u043E\\u0447\\u0442\\u0443\",\n        className: \"popup__input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"popup__error_visible\",\n        children: errMessageEmail\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"popup__label\",\n        children: \"\\u041F\\u0430\\u0440\\u043E\\u043B\\u044C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        value: password || '',\n        onChange: handleChangePassword,\n        name: \"password\",\n        required: true,\n        placeholder: \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u043F\\u0430\\u0440\\u043E\\u043B\\u044C\",\n        className: \"popup__input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"popup__error_visible\",\n        children: errMessagePassword\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"popup__label\",\n        children: \"\\u0418\\u043C\\u044F\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: name || '',\n        onChange: handleChangeName,\n        name: \"name\",\n        required: true,\n        placeholder: \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u0441\\u0432\\u043E\\u0435 \\u0438\\u043C\\u044F\",\n        className: \"popup__input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"popup__error_visible\",\n        children: errMessageName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"popup__server-error_visible\",\n      children: props.onServerErrorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      className: `popup__button-save ${isButtonSaveDisabled && \"popup__button-save_disabled\"}`,\n      disabled: isButtonSaveDisabled,\n      children: \"\\u0417\\u0430\\u0440\\u0435\\u0433\\u0435\\u0441\\u0442\\u0440\\u0438\\u0440\\u043E\\u0432\\u0430\\u0442\\u044C\\u0441\\u044F\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"popup__redirect\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"popup__redirect-paragraph\",\n        children: \"\\u0438\\u043B\\u0438\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"popup__redirect-link\",\n        onClick: props.redirect,\n        children: \"\\u0412\\u043E\\u0439\\u0442\\u0438\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Register, \"6eaRqFGvLJf2Uk4ixgoZgvmqhaY=\");\n\n_c = Register;\nexport default Register;\n\nvar _c;\n\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"sources":["/Users/volkovilya/dev/diploma-frontend/src/components/Register.js"],"names":["React","PopupWithForm","handleValidationEmail","handleValidationPassword","handleValidationTextInputRequired","Register","props","email","setEmail","useState","password","setPassword","name","setName","errMessageEmail","setErrMessageEmail","errMessagePassword","setErrMessagePassword","errMessageName","setErrMessageName","isButtonSaveDisabled","setButtonSaveDisabled","resetForm","handleSubmit","evt","preventDefault","onRegister","resetErrors","handleChangeEmail","target","value","handleChangePassword","handleChangeName","useEffect","onResetForm","onClose","isOpen","onServerErrorMessage","redirect"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PopupWithForm from './PopupWithForm/PopupWithForm';\nimport {handleValidationEmail, handleValidationPassword, handleValidationTextInputRequired} from \"../utils/ValidationForm\";\n\nfunction Register(props) {\n    const [email, setEmail] = React.useState(\"\");\n    const [password, setPassword] = React.useState(\"\");\n    const [name, setName] = React.useState(\"\");\n\n    const [errMessageEmail, setErrMessageEmail] = React.useState(\"\");\n    const [errMessagePassword, setErrMessagePassword] = React.useState(\"\");\n    const [errMessageName, setErrMessageName] = React.useState(\"\");\n\n    const [isButtonSaveDisabled, setButtonSaveDisabled] = React.useState(true);\n\n    const resetForm = () => {\n        setEmail(\"\");\n        setPassword(\"\");\n        setName(\"\");\n        setErrMessageEmail(\"\");\n        setErrMessagePassword(\"\");\n        setErrMessageName(\"\");\n      };\n    \n      const handleSubmit = (evt) => { //решает какую ошибку и где выводить пользователю при неверной валидации\n        evt.preventDefault();\n        if (handleValidationEmail(email) && handleValidationPassword(password) && handleValidationTextInputRequired(name)) {\n            props.onRegister(email, password, name);\n            resetForm();\n        } else {\n            if (!handleValidationEmail(email))  setErrMessageEmail(\"Неправильный формат email\");\n            if (!handleValidationPassword(password))  setErrMessagePassword(\"Пароль введен неверно\");\n            if (!handleValidationTextInputRequired(name))  setErrMessageName(\"Поле Имя обязательно для заполнения\");\n            return\n        }\n        \n        const resetErrors = () => {\n            setErrMessageEmail(\"\");\n            setErrMessagePassword(\"\");\n            setErrMessageName(\"\");    \n        }\n\n\n\n\n\n\n        // if (!handleValidationEmail(email) && handleValidationPassword(password) && handleValidationTextInputRequired(name)) {\n        //   setErrMessageEmail(\"Неправильный формат email\");\n        //   setErrMessagePassword(\"Пароль введен неверно\");\n        //   setErrMessageName(\"Поле Имя обязательно для заполнения\")\n        //   return;\n        // }\n        // if (!handleValidationEmail(email) && !handleValidationPassword(password) && !handleValidationTextInputRequired(name) ) {\n        //   setErrMessageEmail(\"Неправильный формат email\");\n        //   return;\n        // }\n        // if (handleValidationEmail(email) && handleValidationPassword(password) && handleValidationTextInputRequired(name) ) {\n        //   setErrMessageEmail(\"\");\n        //   setErrMessagePassword(\"Пароль введен неверно\");\n        //   setErrMessageName(\"Поле Имя обязательно для заполнения\")\n        //   return;\n        // }\n        // if (handleValidationEmail(email) && !handleValidationPassword(password) && handleValidationTextInputRequired(name) ) {\n        //     setErrMessageEmail(\"\");\n        //     setErrMessagePassword(\"\");\n        //     setErrMessageName(\"Поле Имя обязательно для заполнения\")\n        //     return;\n        //   }\n        //   if (handleValidationEmail(email) && handleValidationPassword(password) && !handleValidationTextInputRequired(name) ) {\n        //     setErrMessageEmail(\"\");\n        //     setErrMessagePassword(\"Пароль введен неверно\");\n        //     setErrMessageName(\"\")\n        //     return;\n        //   }\n    \n        // if (handleValidationEmail(email) && !handleValidationPassword(password) && handleValidationTextInputRequired(name) ) {\n        //     setErrMessageEmail(\"\");\n        //     setErrMessagePassword(\"\");\n        //     setErrMessageName(\"Поле Имя обязательно для заполнения\")\n        //     return;\n        // }\n\n        // props.onRegister(email, password, name);\n        // resetForm();\n      };\n    \n      const handleChangeEmail = (evt) => {\n        setEmail(evt.target.value);\n        resetErrors();\n      };\n    \n      const handleChangePassword = (evt) => {\n        setPassword(evt.target.value);\n        resetErrors();\n\n      };\n\n      const handleChangeName = (evt) => {\n        setName(evt.target.value);\n        resetErrors();\n\n      };\n\n      React.useEffect(() => { //устанавливает кнопку сохранить в нужную кондицию при изменении полей ввода\n        if (email && password && name) {\n          setButtonSaveDisabled(false);\n        } else {\n          setButtonSaveDisabled(true);\n        }\n\n      }, [handleChangeEmail, handleChangePassword, handleChangeName]);\n\n      React.useEffect(() => { //сбрасывает форму при выходе из нее даже если пользователь не дошел до отправки формы и передумал заполнять\n        if (props.onResetForm) {\n          resetForm();\n        } \n      }, [props.onClose]);\n    \n    return (\n        <PopupWithForm name='popup_auth' title='Вход' isOpen={props.isOpen} onClose={props.onClose} onSubmit={handleSubmit} >\n            <fieldset className=\"popup__form-auth\">\n                <label className=\"popup__label\">Email</label>\n                <input type=\"email\" value={email || ''} onChange={handleChangeEmail} name=\"email\" required placeholder=\"Введите почту\" className=\"popup__input\" />\n                <span className=\"popup__error_visible\">{errMessageEmail}</span>\n                <label className=\"popup__label\">Пароль</label>\n                <input type=\"password\" value={password || ''} onChange={handleChangePassword} name=\"password\" required placeholder=\"Введите пароль\" className=\"popup__input\" />\n                <span className=\"popup__error_visible\">{errMessagePassword}</span>\n                <label className=\"popup__label\">Имя</label>\n                <input type=\"text\" value={name || ''} onChange={handleChangeName} name=\"name\" required placeholder=\"Введите свое имя\" className=\"popup__input\" />\n                <span className=\"popup__error_visible\">{errMessageName}</span>\n            </fieldset>\n            <span className=\"popup__server-error_visible\">{props.onServerErrorMessage}</span>\n            <button type=\"submit\" className={`popup__button-save ${isButtonSaveDisabled && \"popup__button-save_disabled\"}`} disabled={isButtonSaveDisabled}>Зарегестрироваться</button>\n            <div className=\"popup__redirect\">\n                <p className=\"popup__redirect-paragraph\">или</p>\n                <button className=\"popup__redirect-link\" onClick={props.redirect}>Войти</button>\n            </div>\n        </PopupWithForm>\n    )\n}\n\nexport default Register;   "]},"metadata":{},"sourceType":"module"}